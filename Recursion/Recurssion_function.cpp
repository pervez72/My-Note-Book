// // "ржпрзЗ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗ, рж╕рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗ ржпрждржХрзНрж╖ржг ржирж╛ ржХрж▓ ржХрж░рж╛ ржлрж╛ржВрж╢ржи ржХрж╛ржЬ рж╢рзЗрж╖ ржХрж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржжрзЗрзЯред
// // рждрж╛рж░ржкрж░ рж╕рзЗ ржирж┐ржЬрзЗ ржХрж╛ржЬ ржХрж░рзЗ ржПржмржВ рж░рж┐ржЯрж╛рж░рзНржи ржжрзЗрзЯ рждрж╛рж░ ржЖржЧрзЗрж░ ржЬржиржХрзЗред"

// #include <iostream>
// using namespace std;

// int sum(int n) {
//     cout << "Call sum(" << n << ") - pause here" << endl;  // ржлрж╛ржВрж╢ржи ржХрж▓ рж╣ржЪрзНржЫрзЗ, pause
//     if (n == 0) {
//         cout << "Base case reached: sum(0) = 0" << endl;
//         return 0;
//     }
//     int res = n + sum(n - 1);  // recursive call, ржирж┐ржЪрзЗ ржпрж╛ржмрзЗ, pause рж╣ржмрзЗ

//     cout << "Resume sum(" << n << "), result = " << res << endl;  // ржлрж┐рж░рзЗ ржПрж╕рзЗ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рж▓рзЛ
//     return res;
// }

// int main() {
//     int num = 3;
//     int f_res=sum(num);
//     cout << "Total sum: "<< f_res << endl;
//     return 0;
// }

// // int res = n + sum(n - 1);  this line brea point use and see call stack ok 


#include <iostream>
using namespace std;

int sum(int n) {
    static int i = 0;

    // ЁЯЫС Base case: ржпржЦржи n == 0, рждржЦржи ржЖрж░ ржирждрзБржи ржХрзЛржирзЛ ржХрж▓ рж╣рзЯ ржирж╛
    if (n == 0) return 0;

    // ЁЯЯб Pause phase:
    // ржПржЦржиржХрж╛рж░ ржХрж╛ржЬ ржерж╛ржорж┐рзЯрзЗ, ржирждрзБржи sum(n-1) ржХрж▓ рж╣ржЪрзНржЫрзЗ
    int result = n + sum(n - 1);

    // ЁЯЯв Resume phase:
    // ржирж┐ржЪрзЗрж░ ржлрж╛ржВрж╢ржи ржХрж▓ рж╢рзЗрж╖ рж╣рзЯрзЗ ржЖрж╕ржЫрзЗ, ржПржЦржи ржХрж╛ржЬ рж╢рзЗрж╖ ржХрж░рзЗ ржЙржкрж░рзЗ return рж╣ржЪрзНржЫрзЗ
    i = i + 1;
    cout << "ЁЯФБ Resume count i = " << i << ", returning sum(" << n << ") = " << result << "\n";

    return result;
}

int main() {
    int total = sum(3);
    cout << "\nЁЯОп Final sum = " << total << endl;
    return 0;
}
