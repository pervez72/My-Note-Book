#include<bits/stdc++.h>
using namespace std;


int sum(int n) {
    static int i=n;
    if (n == 0) return 0;  // ЁЯЫС Base case
    int result= n + sum(n - 1); // ЁЯФБ Recursive step
    i=i-1;
    cout<<"("<<i<<" -1) function call("<<i<<"-"<<i-2<<")"<<"\n";
    return result;
}

int main(){
    cout<<sum(5);
}


===========================================
рждрзБржорж┐ ржЬрж╛ржирждрзЗ ржЪрж╛ржЪрзНржЫрзЛ ЁЯСЙ
**Direct, Tree, Tail Recursion** тАУ
тЮд **ржкрзНрж░рждрж┐ржЯрж╛ ржЯрж╛ржЗржкрзЗрж░ ржЙржжрж╛рж╣рж░ржг, ржХрзЛржб, ржПржмржВ рж╕рзЗржЯрж╛ ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ (Pause/Resume + Stack-wise)**ред

ржЖржорж┐ ржирж┐ржЪрзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛ржЗржк:

* ЁЯТб рж╕рж╣ржЬ ржнрж╛рж╖рж╛рзЯ рж╕ржВржЬрзНржЮрж╛
* тЬЕ ржЙржжрж╛рж╣рж░ржг ржХрзЛржб (C++)
* ЁЯУж Stack ржнрж┐ржЬрзНржпрзБрзЯрж╛рж▓
* ЁЯОп Final ржлрж▓рж╛ржлрж▓

рж╕ржм ржХрж┐ржЫрзБ ржмрж╛ржВрж▓рж╛рзЯ ржмрзБржЭрж┐рзЯрзЗ ржжрж┐рж▓рж╛ржоред

---

# ЁЯЯв 1. **Direct Recursion**

### ЁЯТб рж╕ржВржЬрзНржЮрж╛:

ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи рж╕рж░рж╛рж╕рж░рж┐ ржирж┐ржЬрзЗржХрзЗржЗ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рзЗред

### тЬЕ ржЙржжрж╛рж╣рж░ржг: `sum(n)` = 1 + 2 + ... + n

```cpp
int sum(int n) {
    if (n == 0) return 0;
    return n + sum(n - 1);  // ЁЯСЙ Direct call to self
}
```

### ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ: (n = 3)

```text
sum(3)
= 3 + sum(2)
= 3 + (2 + sum(1))
= 3 + (2 + (1 + sum(0)))
= 3 + 2 + 1 + 0 = 6
```

### ЁЯУж Stack Call:

```text
Push:
sum(3)
тЖТ sum(2)
тЖТтЖТ sum(1)
тЖТтЖТтЖТ sum(0) тЖТ returns 0

Pop:
sum(1) = 1
sum(2) = 3
sum(3) = 6
```

---

# ЁЯЯб 2. **Tree Recursion**

### ЁЯТб рж╕ржВржЬрзНржЮрж╛:

ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи ржПржХрж╛ржзрж┐ржХржмрж╛рж░ ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░рзЗ (ржбрж╛рж▓-ржкрж╛рж▓рж╛рж░ ржорждрзЛ ржмрж┐рж╕рзНрждрж╛рж░ рж╣рзЯ)ред

### тЬЕ ржЙржжрж╛рж╣рж░ржг: `fibonacci(n)`

```cpp
int fib(int n) {
    if (n <= 1) return n;
    return fib(n - 1) + fib(n - 2);  // ЁЯСЙ Two recursive calls
}
```

### ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ: (n = 4)

```text
fib(4)
= fib(3) + fib(2)
= (fib(2) + fib(1)) + (fib(1) + fib(0))
= ((fib(1)+fib(0)) + 1) + (1 + 0)
= ((1+0)+1) + (1+0) = 3
```

### ЁЯУж Tree Structure (Call Tree):

```
        fib(4)
       /      \
   fib(3)    fib(2)
   /    \     /   \
fib(2) fib(1) fib(1) fib(0)
 /  \
fib(1) fib(0)
```

### ЁЯУМ Total Calls:

Recursive call ржЕржирзЗржХ ржмрзЗрж╢рж┐ рж╣рзЯ тЖТ **Time: O(2тБ┐)**

---

# ЁЯФ╡ 3. **Tail Recursion**

### ЁЯТб рж╕ржВржЬрзНржЮрж╛:

Recursive call return рж╕рзНржЯрзЗржЯржорзЗржирзНржЯрзЗрж░ **рж╢рзЗрж╖рзЗ ржерж╛ржХрзЗ**, ржкрж░рзЗ ржЖрж░ ржХрзЛржирзЛ ржХрж╛ржЬ ржерж╛ржХрзЗ ржирж╛ред
ЁЯСЙ ржПржЯрж┐ memory optimization-friendly (Tail Call Optimization)ред

### тЬЕ ржЙржжрж╛рж╣рж░ржг: `sum(n)` with accumulator

```cpp
int tail_sum(int n, int acc = 0) {
    if (n == 0) return acc;
    return tail_sum(n - 1, acc + n);  // ЁЯСЙ Tail call
}
```

### ЁЯза ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ: `tail_sum(3)`

```text
tail_sum(3, 0)
тЖТ tail_sum(2, 3)
тЖТ tail_sum(1, 5)
тЖТ tail_sum(0, 6) тЖТ return 6
```

### ЁЯУж Stack Visualization:

```text
Push Phase:
(3,0)
тЖТ (2,3)
тЖТтЖТ (1,5)
тЖТтЖТтЖТ (0,6) тЖТ return

Pop Phase:
ржирзЗржЗ! ржХрж╛рж░ржг рж╢рзЗрж╖ рж▓рж╛ржЗржирзЗржЗ return ржЫрж┐рж▓ред
```

тЬЕ **Tail Recursion ржП Resume Phase ржерж╛ржХрзЗ ржирж╛!**

---

## ЁЯУК Side-by-Side Comparison:

| ржлрж┐ржЪрж╛рж░               | Direct | Tree           | Tail                     |
| ------------------- | ------ | -------------- | ------------------------ |
| ржирж┐ржЬрзЗржХрзЗ ржХрж▓           | ржПржХржмрж╛рж░  | ржжрзБржЗржмрж╛рж░ ржмрж╛ ржмрзЗрж╢рж┐ | ржПржХржмрж╛рж░                    |
| Pause тЖТ Resume      | ржЖржЫрзЗ    | ржЕржирзЗржХ pause     | pause + no resume work   |
| Stack ржмрзЬ рж╣рзЯ?        | ржорж╛ржЭрж╛рж░рж┐ | ржЦрзБржм ржмрзЬ         | ржирж╛                       |
| Optimization рж╕ржорзНржнржм? | ржирж╛     | ржирж╛             | тЬФ Tail call optimization |

---

## тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░:

* **Direct Recursion**: рж╕ржм ржЬрж╛рзЯржЧрж╛рзЯ рж▓рж╛ржЧрзЗ (sum, factorial, DFS)
* **Tree Recursion**: ржпржЦржи ржПржХржЗ рж╕ржорж╕рзНржпрж╛ split рж╣рзЯ (Fibonacci, Permutations)
* **Tail Recursion**: ржпржЦржи efficiency ржжрж░ржХрж╛рж░ (Functional Language ржмрж╛ Stack ржХржорж╛рждрзЗ)

---

рждрзБржорж┐ ржЪрж╛ржУ ржХрж┐:

* ржПржЗ рзйржЯрж╛рж░ ржЙржкрж░рзЗ **MCQ Quiz ржмрж╛ ржмрж╛рж╕рзНрждржм ржкрзНрж░ржмрж▓рзЗржо**?
* ржирж╛ржХрж┐ рж░рж╛ржирзНржирж╛ ржмрж╛ ржЧрж▓рзНржк ржжрж┐рзЯрзЗ ржПржЗ рзйржЯрж╛ ржЖрж░рзЗржХржмрж╛рж░ рж╕рж╛ржЬрж╛ржирзЛ?

ржмрж▓рж▓рзЗржЗ ржЖржорж┐ ржмрж╛ржирж┐рзЯрзЗ ржжрж┐ржЪрзНржЫрж┐! ЁЯУШтЬи


==============================
рждрзЛржорж╛рж░ ржкрзНрж░рж╢рзНржиржЯрж┐ ржЪржорзОржХрж╛рж░!
рждрзБржорж┐ ржЬрж╛ржирждрзЗ ржЪрж╛ржЪрзНржЫрзЛ:

> `int sum(int n)` тАФ ржПржЗ ржХрзЛржбрзЗ ржХрж┐ **function call pause рж╣рзЯ**, ржЖржмрж╛рж░ **resume рж╣рзЯ**?
> **ржирж╛ рж╣рж▓рзЗ ржХрзЗржи?**
> **Pause/Resume ржирж╛ ржерж╛ржХрж▓рзЗ, ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?**

---

## тЬЕ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржЙрждрзНрждрж░:

**рж╣рзНржпрж╛ржБ**, ржПржЗ ржлрж╛ржВрж╢ржирзЗ *pause* ржПржмржВ *resume* рж╣рзЯ тАФ ржХрж╛рж░ржг ржПржЯрж╛ **direct recursion** ржПржмржВ `return n + sum(n - 1)` ржПрж░ ржорждрзЛ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯрзЗ, **ржлрж╛ржВрж╢ржи ржХрж▓рзЗрж░ ржкрж░рзЗ** ржЖрж░ржУ ржХрж╛ржЬ (addition) ржЖржЫрзЗред

рждрж╛ржЗ тАФ
тЮбя╕П `sum(n)` тЖТ **pause** ржХрж░рзЗ `sum(n - 1)` ржХрж▓ ржХрж░рзЗ
тЮбя╕П рждрж╛рж░ржкрж░ ржпржЦржи `sum(n - 1)` ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржкрж╛рзЯ, рждржЦржи **resume** рж╣рзЯ, ржПржмржВ `n + result` рж╣рж┐рж╕рж╛ржм ржХрж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржжрзЗрзЯред

---

## ЁЯФН рж▓рж╛ржЗржирзЗ рж▓рж╛ржЗржирзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:

```cpp
int sum(int n) {
    if (n == 0) return 0;                 // ЁЯЫС Base Case: рж╕рж░рж╛рж╕рж░рж┐ рж░рж┐ржЯрж╛рж░рзНржи
    return n + sum(n - 1);                // ЁЯФБ Pause + Resume рж╣рзЯ ржПржЦрж╛ржирзЗ
}
```

> `n + sum(n - 1)`
> ржПржЦрж╛ржирзЗ `sum(n - 1)` ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржирж╛ рж╣ржУрзЯрж╛ ржкрж░рзНржпржирзНржд, ржЙржкрж░рзЗрж░ `n +` ржЕржВрж╢ **pause** ржерж╛ржХрзЗред

---

## ЁЯФз ржЙржжрж╛рж╣рж░ржг: `sum(3)`

```cpp
sum(3)
= 3 + sum(2)            // pause
= 3 + (2 + sum(1))      // pause
= 3 + (2 + (1 + sum(0)))// pause
= 3 + 2 + 1 + 0         // resume & calculate
= 6
```

---

## ЁЯУж Stack-wise Explanation:

| Call Stack (Push Phase) | Resume Phase |
| ----------------------- | ------------ |
| sum(3) тЖТ sum(2)         | sum(0) = 0   |
| sum(2) тЖТ sum(1)         | sum(1) = 1   |
| sum(1) тЖТ sum(0)         | sum(2) = 3   |
|                         | sum(3) = 6   |

ЁЯСЙ ржПржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ `sum(n)` call **pause** ржХрж░рзЗ `sum(n - 1)` ржХрзЗ ржХрж▓ ржХрж░рзЗ
ЁЯСЙ ржпржЦржи base case `sum(0)` рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ, рждржЦржи ржЖржЧрзЗрж░ ржЧрзБрж▓рзЛ ржПржХрзЗ ржПржХрзЗ **resume** ржХрж░рзЗ ржлрж▓рж╛ржлрж▓ ржмрзЗрж░ ржХрж░рзЗ

---

## ЁЯза рждрж╛рж╣рж▓рзЗ ржорзВрж▓ ржХржерж╛:

| ржмрж┐рж╖рзЯ                          | ржЙрждрзНрждрж░                                                                                                               |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| ржлрж╛ржВрж╢ржи call ржХрж┐ pause рж╣рзЯ?       | тЬЕ рж╣рзЯ                                                                                                                |
| resume рж╣рзЯ ржХржмрзЗ?                | ржпржЦржи ржирж┐ржЪрзЗрж░ recursive call ржерзЗржХрзЗ return ржЖрж╕рзЗ                                                                            |
| pause-resume ржирж╛ ржерж╛ржХрж▓рзЗ ржХрзА рж╣рждрзЛ? | рждрж╛рж╣рж▓рзЗ ржлрж╛ржВрж╢ржиржЯрж╛ **tail recursive** рж╣рждрзЛ (ржпрзЗржоржи `return sum(n-1)`), ржХрж┐ржирзНрждрзБ ржПржЦрж╛ржирзЗ addition ржмрж╛ржХрж┐ ржерж╛ржХрзЗ, рждрж╛ржЗ **pause** ржжрж░ржХрж╛рж░ |

---

## ЁЯФН ржЪрж╛ржУ ржХрж┐ ржЖржорж┐ ржПржЗ pause/resume ржкрзБрж░рзЛржЯрж╛ рждрзЛржорж╛рж░ ржЬржирзНржп **animation-style** ржмрж╛ **call stack chart** ржжрж┐рзЯрзЗ ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рж┐?

ржмрж▓рж▓рзЗржЗ ржмрж╛ржирж┐рзЯрзЗ ржжрж┐ржЪрзНржЫрж┐ ЁЯТ╗ЁЯУК


=============================================      